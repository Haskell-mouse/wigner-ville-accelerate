{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fold",
				"fold1 ∷ (Shape sh, Elt a) ⇒ (Exp a → Exp a → Exp a) → Acc (Array (sh :. Int) a) → Acc (Array sh a)\tData.Array.Accelerate"
			],
			[
				"zip",
				"zipWith ∷ (Shape sh, Elt a, Elt b, Elt c) ⇒ (Exp a → Exp b → Exp c) → Acc (Array sh a) → Acc (Array sh b) → Acc (Array sh c)\tData.Array.Accelerate"
			],
			[
				"errTextS",
				"errorExit ∷ Text → Sh a\tShelly"
			],
			[
				"do",
				"do\tkeyword"
			],
			[
				"opts",
				"opts\tGHC Options"
			],
			[
				"l",
				"l"
			],
			[
				"core",
				"coreFunction"
			],
			[
				"column",
				"columnt_name"
			],
			[
				"accele",
				"accelerate"
			],
			[
				"from",
				"fromText"
			],
			[
				"sup",
				"supAVG"
			],
			[
				"apply",
				"applyFFt"
			],
			[
				"inverse",
				"inverseFFT"
			],
			[
				"h",
				"hilbert"
			],
			[
				"smoo",
				"smoothMatrix"
			],
			[
				"to",
				"toPrecision"
			],
			[
				"write",
				"writeFile1"
			],
			[
				"text",
				"text"
			],
			[
				"deri",
				"deriving"
			],
			[
				"Ins",
				"instance\tkeyword"
			],
			[
				"run",
				"runPrsEP"
			],
			[
				"n",
				"newtype\tNewtype"
			],
			[
				"runP",
				"runPrsE"
			],
			[
				"concat",
				"concat0C"
			],
			[
				"conca",
				"concat30C"
			],
			[
				"last",
				"lastName"
			],
			[
				"age",
				"ageStr"
			],
			[
				"ag",
				"ageStr"
			],
			[
				"Inco",
				"IncorrectDataError"
			],
			[
				"con",
				"construct"
			],
			[
				"String",
				"String"
			],
			[
				"de",
				"deriving\tkeyword"
			],
			[
				"f",
				"f"
			],
			[
				"crea",
				"createGPU"
			],
			[
				"len",
				"length"
			],
			[
				"cre",
				"createFFT"
			],
			[
				"tau",
				"taumax"
			],
			[
				"ma",
				"map"
			],
			[
				"cons",
				"consts"
			],
			[
				"gen",
				"genAll"
			],
			[
				"u",
				"unit"
			],
			[
				"arr",
				"arrLength"
			],
			[
				"po",
				"points"
			],
			[
				"exp",
				"expPeriod"
			],
			[
				"fr",
				"fromList"
			],
			[
				"leng",
				"lenghth"
			],
			[
				"parse",
				"parseArgs"
			],
			[
				"enum",
				"enumFromThen"
			],
			[
				"gro",
				"groupElems"
			],
			[
				"doe",
				"doesEnrageMork"
			],
			[
				"sto",
				"stompOrStab"
			],
			[
				"dor",
				"doesEnrageGork"
			],
			[
				"sum",
				"sumOfnum"
			],
			[
				"q",
				"qualified"
			],
			[
				"im",
				"import\tkeyword"
			],
			[
				"qu",
				"qualified"
			],
			[
				"c",
				"c"
			],
			[
				"Cen",
				"Center_of_light"
			],
			[
				"toM",
				"toMatrixS"
			],
			[
				"dr",
				"drop"
			],
			[
				"frames",
				"frames"
			],
			[
				"U",
				"UNPACK"
			],
			[
				"in",
				"in\tkeyword"
			],
			[
				"all",
				"allFrames"
			],
			[
				"drop",
				"dropFrames"
			],
			[
				"temp",
				"tempFrames"
			],
			[
				"Mo",
				"monoid"
			],
			[
				"av",
				"avPixFmtGray16"
			],
			[
				"Jui",
				"JuicyPixelFormat"
			],
			[
				"get",
				"getFrames"
			],
			[
				"Tra",
				"trace"
			],
			[
				"Flex",
				"FlexibleInstances"
			],
			[
				"Vect",
				"Vectorizable"
			],
			[
				"v",
				"v"
			],
			[
				"putB",
				"putBoardR"
			],
			[
				"for",
				"force"
			],
			[
				"next",
				"nextgen"
			],
			[
				"b",
				"b"
			],
			[
				"sho",
				"showCells"
			],
			[
				"hei",
				"height"
			],
			[
				"bo",
				"Board2"
			],
			[
				"sh",
				"showCells"
			],
			[
				"put",
				"putStr"
			],
			[
				"pu",
				"putChar"
			],
			[
				"x",
				"x"
			],
			[
				"z",
				"z"
			],
			[
				"getC",
				"getChar"
			],
			[
				"digi",
				"digitToInt"
			],
			[
				"putS",
				"putStr"
			],
			[
				"pus",
				"putStrLn"
			],
			[
				"puts",
				"putStr"
			],
			[
				"imp",
				"import\tkeyword"
			],
			[
				"sol",
				"solutions' ∷ [Int] → Int → [Expr]\tGames"
			],
			[
				"appl",
				"apply ∷ Op → Int → Int → Int\tGames"
			],
			[
				"Eq",
				"Eqvi"
			],
			[
				"qua",
				"qualified"
			],
			[
				"F",
				"Foldable t\tPrelude"
			],
			[
				"take",
				"takeWhile2"
			],
			[
				"int2",
				"int2bin ∷ Int → [Int]\tExercises"
			],
			[
				"is",
				"isLower ∷ Char → Bool\tData.Char"
			],
			[
				"int",
				"Integer \tPrelude"
			],
			[
				"first",
				"firstPosFrom"
			],
			[
				"mod",
				"module"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Data/Array/Accelerate/Math/ModifiedB.hs",
			"settings":
			{
				"buffer_size": 4880,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Data/Array/Accelerate/Math/Hilbert.hs",
			"settings":
			{
				"buffer_size": 3467,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/root/yesod/myFirst/config/settings.yml",
			"settings":
			{
				"buffer_size": 1556,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeHaskell\n--------------\n\n  *SublimeHaskell* 2.1.32\n  =======================\n  \n  SublimeHaskell 2.1.x is a release tree for minor enhancements and fixes to newly identified (and resolved) issues.\n  \n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  \n  This ensures that stale versions of internal *SublimeHaskell* Python modules don't cause problems when *PackageControl* reloads the plugin. *SublimeHaskell* does not (and cannot) forcibly reload its own internal modules and has no control over how *PackageControl* reloads a plugin.\n  \n  ## Coming Soon to SublimeHaskell\n  \n       _             _               ___   _____\n      | |__  ___  __| | _____   __  / _ \\ |___ /\n      | '_ \\/ __|/ _` |/ _ \\ \\ / / | | | |  |_ \\\n      | | | \\__ \\ (_| |  __/\\ V /  | |_| | ___) |\n      |_| |_|___/\\__,_|\\___| \\_/    \\___(_)____/\n  \n  When `hsdev 0.3` testing is complete (likely in the next 2-3 weeks) and Issue 399 is closed, you will have to *upgrade `hsdev` to the current 0.3 version*.\n  \n  ## In The Meantime... `hsdev 0.3.0.1`: Do Not Use\n  \n  Recently, `hsdev 0.3.0.1` was released, . If you installed `hsdev` since New Year's 2018, either via `cabal` or `stack`\n  \n      cabal install hsdev\n  \n  or\n  \n      stack install hsdev\n  \n  then type the following at your shell or command window's prompt:\n  \n      hsdev version\n  \n  If the version number does not start with `0.2`, you inadvertently installed an incompatible version. Version `0.3.0.1` support will be released soon, pending testing.\n  \n  To install the `0.2` series version that is compatible with _SublimeHaskell_:\n  \n      cabal install hsdev-0.2.5.1\n  \n  If you try:\n  \n      stack install hsdev-0.2.5.1\n  \n  `stack` will complain about `haddock-api` and `hdocs` incompatibilities (the `stack.yaml` file probably needs updating.) Stick with `cabal install` for the time being.\n  \n  \n  ## In this release...\n  \n  **on_query_context fix**: This event handler method should return a value; found by @mvoidex in the the `hsdev-3` branch.\n  \n  ## 2.1.30\n  \n  **Issue 416 (follow-on)**: ST3 introduced a JSON format for color schemes; the default ST3 color schemes now use this format (`Monokai`, in particular.) Detect when a new format color scheme is being used, extract attributes from the JSON. Older XML color schemes still work. This fixes hover issues when using ST3 3157 and onward.\n  \n  **Issue 415**: Add a `lint_opts` setting, as requested, and pass these options to `hsdev` when executing the `lint` command. However, it turns out that `hsdev` doesn't actually use these options -- added for future `hsdev` fix.\n  \n  ## 2.1.30\n  \n  **Issue 417**: Do the right thing (DTRT) if the view's file name isn't set. SublimeEventViewer's do\\_activated should have checked for this.\n  \n  ## 2.1.29\n  \n  **Quick hotfix**: Fix typo in ST3 3156-specific code.\n  \n  ## 2.1.28\n  \n  **Issues 414, 416**: Fix a regression that was introduced during 2.1.25 to unify the _SublimeHaskell_ event viewer class. The hover and completion methods were accidentally deleted. Functionality restored.\n  \n  ## 2.1.26\n  \n  **Issue 408**: Add the 'sublimehaskell.marker' scopes to the Cubicle theme.\n  \n  ## 2.1.25\n  \n  **Issue 407**: Check/lint and prettify-on-save broken for two reasons. First, _SublimeText_ stores persistent metadata about a file's view, which stored the old \"improved\" syntax file's name. Consequently the check for Haskell source would fail. Second, ST3 Build 3157 changed the event listener API once again, breaking post-save command actions.\n  \n  **Issue 404**: _SublimeREPL_'s \"external id\" is used for both the view's name *and* for the name of a persistent history file. Translate any illegal Windows file name characters to underscores and dashes (\"\\_\" and \"-\").\n  \n  ## 2.1.24\n  \n  **Issue 401**: Fix traceback in `check_lint.py`.\n  \n  ## 2.1.23\n  \n  **Issue 395**: _SublimeHaskell_ will now pop up a message dialog if you installed a version of `hsdev` that is incompatible (see the notes above about `hsdev 0.3.x.y` incompatibility.) You will also get a message dialog if you have a backend configuration that cannot execute or find the `hsdev` executable.\n  \n  **Haskell (improved) syntax highlighting**: Automagically converted the _SublimeText 2_ syntax definitions to the newer _SublimeText 3_ `YAML` format. There shouldn't be any noticeable changes to highlighting (except for Issue 387, below.) In other words, this should be no worse than what existed versions prior to `2.1.23`. Hopefully. With fingers crossed.\n  \n  The previous \"improved\" syntax highlighting is still accessible. To use that syntax highlighter, look for _SublimeHaskell_ syntaxes that start with \"_ST2_\".\n  \n  **Issue 387**: Underscores in numeric literals are now recognized, as are hexadecimal floating point literals (@iamrecursion should be beaming now.) You can now write:\n  \n      upperAddr :: Int\n      upperAddr = 0x_7fff_ffff\n  \n  Note: Just because you can write this in your code doesn't mean that the GHC compiler will accept it.\n  \n  ## 2.1.22\n  \n  **ghc-mod error messages**: Error messages generated by `ghc-mod` are now just logged to a project-specific panel. These messages have nothing to do with the success or failure of commands sent to `ghc-mod`; they are just the error output from `ghc-mod`. The panel will show itself when `ghc-mod` is started for a project directory. It can be closed to preserve screen real estate.\n  \n  **Project selection list for multi-project builds**: This selection list was broken. If you have multiple projects within a directory, `hsdev` will detect them. When you use _SublimeHaskell_ `build`, you will be prompted for which project to build.\n  \n  **Parsing multiple error messages from GHC's output**: Fixed the regular expression that collects error messages generated by `GHC`. It needed a negative lookahead to detect the next error message's start.\n  \n  **Pull request 393**: Rename the improved Haskell syntax \"Haskell (improved)\" to better distinguish it from the ordinary Haskell syntax highlighting scheme.\n  \n  ## 2.1.21\n  \n  **Issue  394**: Fix a bad merge from the `hsdev-3` branch. Check/lint and fly mode should now work correctly, without spurious messages.\n  \n  ## 2.1.20\n  \n  **Issue 396**: Arrange for the code prettifier to execute after a successful build-on-save (i.e., `enable_auto_build` is `true`).\n  \n  ## 2.1.19\n  \n  **hsdev backend cleanups**: Pre-emptive cleanups to the `hsdev` backend to prevent request processing deadlocks across threads. Also ensure that post-save processing occurs inside the UI thread.\n  \n  ## 2.1.18\n  \n  **Check/Lint is asynchronous again**: By popular demand, post-save check/lint is now asynchronous again. Tested with the _none_ and _ghc-mod_ backends to ensure that indenter runs as expected (and, yes, really, it does.)\n  \n  **Pull #378**: `GHCI Repl` command should always be available/visible.\n  \n  ## 2.1.17\n  \n  **Issue 390**: Inadvertantly reversed parameters produced the incorrect file names when parsing `build` output, which disabled the ability to click on the error report's file name, line and column.\n  \n  ## 2.1.16\n  \n  **Issue 380**: Make the \"None\" and \"ghc-mod\" backends play nicely with build/check/lint.\n  \n  ## 2.1.15\n  \n  **Issue 384**: Identified the circumstances under which the `stylish` and `hindent` commands were disabled, when trying to prettify a \"lone\" file (Haskell source that isn't part of a `cabal` project).\n  \n  ## 2.1.14\n  \n  **Issues 380, 384**: Make the indenter code simple, dumb and unsophisticated. Do not subclass off `sublime_plugin` classes, since this does not appear to work. Should resolve most of, hopefully, all of, issues related to indenters prettifying-on-save. (Does not stop output window flicker reported in issue 383.)\n  \n  **Issues 381, 382**: Minimize the quantity of files and databases scanned on each re-inspection pass, e.g., after a save or fly check. Found stale data being carried from inspection pass to inspection pass; ensure that the data is deleted properly.\n  \n  **Fly check**: Refactor the way fly check mode waits for a check to complete, without using class variables in other modules. Less hacky solution.\n  \n  ## 2.1.12\n  \n  **Fly mode break-fix**: Propagate a class rename in the `check_lint` module to `fly_check`.\n  \n  ## 2.1.11\n  \n  **Indent-on-save**: Should be fixed (again).\n  \n  **Refactored `hsdev` backend communication**: While fixing *indent-on-save*, discovered a few quirks in `hsdev` backend communication.\n  \n  ## Combined 2.1.0 - 2.1.10 changes\n  \n  - Fix a traceback in `HsDevBackend.files_and_contents`; `None` is usually passed in as a default, not an empty dictionary.\n  \n  - Revert some `sublime_plugin.ViewEventListener` refactoring, since the API was only recently \"enhanced\" (Build 3155 -- most users are on Build 3146.)\n  \n  **Fly mode**: Checking or linting after a pause in typing, aka \"fly mode\", now works reliably again. To enable, add the following to your user settings:\n  \n      \"lint_check_fly\": true\n  \n  You can control the idle time that _SublimeHaskell_ waits before initiating checking or linting via the `lint_check_fly_idle ` setting. The default is 5 seconds. You should not set this to a value lower than 3 seconds or checks/lints can occur faster than you can type (although there is nothing to stop you from doing so in the code. Yet.)\n  \n  **Issue 374 (enhancement)**: Limiting the error, warning and hints displayed in the _Sublime Haskell Output Window_ after a check, lint or build is now supported via the `show_only` setting:\n  \n      \"show_only\": {\n          \"errors\": true,\n          \"warnings\": true,\n          \"hints\": true\n      },\n  \n  The `show_only` setting can be customized as _SublimeHaskell_ project setting, i.e., from within a `.sublime-project` file:\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\":\n          {\n            \"show_only\": {\n                \"errors\": true,\n                \"warnings\": true,\n                \"hints\": true\n            },\n          }\n      }\n  \n  **Issue 365**: Rethink how plugin preferences are stored in the `SettingsContainer` object; use Python properties instead of being clever with instance attributes. Property setters allow validity testing when new preference values are read.\n  \n  **Issue 377 (possible 373, 359)**: @coodoo noticed a `UnicodeDecodeError` traceback after saves, which turns out to be a short read from the backend's socket -- more data is available, which SublimeHaskell should continue to read in order to ensure that decode('utf-8') succeeds. The fix here is to continue reading from the socket if decode('utf-8') raises the UnicodeDecodeError exception.  If no exception is raised, then split and process what looks like a complete request.\n  \n  This probably also fixes issues 373 and 359, which manifested similar behavior, but without the traceback.\n  \n  **Issues 375, 376 (duplicate)**: Make the \"local\", \"exec-with\" and \"install-dir\" `hsdev` backend options work together properly. If, for some reason, a backend has \"local\" set but either \"exec-with\" or \"install-dir\" isn't set, SublimeHaskell should not generate a backtrace. It should just mark the particular backend as unusable and continue onward.\n  \n  **Fix REPL support**: REPL support was supported solely via `cabal repl` and the code supporting Haskell REPLs itself needed re-evaluation. All execution wrappers are now supported: `cabal repl`, `cabal new-repl` and `stack repl`.\n  \n  *NOTE: The `haskell_build_tool` setting determines which execution wrapper is used. `haskell_build_tool` can be a project-specific setting, not just a default or user preference. See below in Release 2.1.3.*\n  \n  **Fix status line issues**: There was a long standing bug with SublimeHaskell's use and manipulation of the status line. The main manifestation was a thread that repeatedly updated the status line every 0.2 seconds -- it wasn't always perceivable because there wasn't any noticeable flicker. This fix should cut down in CPU and thread usage that this issue may have caused.\n  \n  **'SublimeHaskell: Reinspect All' now asynchronous**: This command now does its work asynchronously. Previously, it did its work in the SublimeText UI thread, leading to perceived hangs.\n  \n  **Issue 371**: Revert a spurious change to a `hsdev` backend method (that was supposed to be reverted.)\n  \n  **SublimeHaskell: Run**: Make running project executables play nicely with execution wrappers (e.g., `cabal run`, `stack exec`, `cabal new-run`). Eliminated the 'SublimeHaskell: Stack Exec' item because all of the functionality is included in 'SublimeHaskell: Run'. This change eliminates all of the previous gymnastics required to locate the executable in the first place.\n  \n  `SublimeHaskell: Run` will also prompt for command line arguments, which are parsed into a Python list by the `shlex` package. Arguments will persist across command invocations and Sublime Text sessions.\n  \n  **Issue 365**: More linting on the `prettify_exectable` setting. Someday, we'll know where the \"{0}\" comes from.\n  \n  **Issue 361**: Add `cabal new-test` support in the `SublimeHaskell: Test` command. Restored automatic testing after a successful build; automatic benchmarking is also possible after a successful build. See **auto_build_mode** note below.\n  \n  **Issue 344**: Most, if not all, 'cabal new-*' commands should be available, including `new-freeze` and `new-bench`. Corresponding commands for regular `cabal` and `stack` (as applicable) implemented. The major hack is that `cabal-new-build` does not have a clean command, so this is implemented as a function inside the SublimeHaskell builder.\n  \n  **auto_build_mode change**: The `auto_run_tests` setting is now deprecated. Its functionality is now replaced by two new build modes: *normal-then-test* (run tests after a successful build) and *normal-then-bench* (run benchmarks after a successful build.) SublimeHaskell will pop up an information dialog if `auto_run_tests` is in your preferences.\n  \n  **Project Settings**: All SublimeHaskell-related project settings are now contained within the `SublimeHaskell` dictionary. This allows you to encapsulate certain settings, like `haskell_build_tool`, on a per-project basis instead of via user preferences. There is more information at the bottom of the `SublimeHaskell.sublime-settings` (default plugin settings) file.\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\": {\n          \"haskell_build_tool\": \"cabal-new-build\"\n        }\n      }\n  \n  **build.py**: Code cleanups related to building Haskell applications, mostly related to better class structure, fewer global variables. (Related to issues 361 and 344.)\n  \n  **`pylint` cleanups**: `pylint` has updated, lots of new warnings. Fix code to bring them down to a dull roar.\n  \n  **Issue 366**: Word and default completions did not produce results, which became apparent while using the \"none\" backend. Removed the `inhibit_completions` setting because its purpose was confusing. Added two new settings, `add_word_completions` and `add_default_completions`. `add_word_completions` adds words in the source file that are more than three characters; this is a SublimeText feature that SublimeHaskell normally inhibits. `add_default_completions` adds the contents of the `Haskell.sublime-completions` file, which SublimeHaskell normally inhibits as well. Both settings default to `false`. (H/T to @Pastafarianist.)\n  \n  **ghc-mod**: Completions now work again, modeled off the `ghc-mod/elisp/ghc-comp.el` code. It's not perfect, but it suffices to improve developer productivity.\n  \n  **Issue 365 (partial)**: Fix dignostic message when SublimeHaskell doesn't accept the `prettify_executable` setting's value.\n  \n  **Issue 364**: `SublimeHaskell: Test` actually invoked the `install` task, not the `test` task. Also added `SublimeHaskell - Test` to the \"Build With...\" menu. Issue fixed.\n  \n  **Issue 352**: Add command line options for `stylish-haskell` and `hindent`. NOTE: These are lists, not strings.\n  \n  ## Upcoming Development Milestones\n  \n  Upcoming development milestones, listed in order of priority:\n  \n  ### The SublimeHaskell Editing Guide (Ongoing)\n  \n  Documentation is always a good thing. The guide is a work-in-progress.\n\n  *SublimeHaskell* 2.1.31\n  =======================\n  \n  SublimeHaskell 2.1.x is a release tree for minor enhancements and fixes to newly identified (and resolved) issues.\n  \n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  \n  This ensures that stale versions of internal *SublimeHaskell* Python modules don't cause problems when *PackageControl* reloads the plugin. *SublimeHaskell* does not (and cannot) forcibly reload its own internal modules and has no control over how *PackageControl* reloads a plugin.\n  \n  ## Coming Soon to SublimeHaskell\n  \n       _             _               ___   _____\n      | |__  ___  __| | _____   __  / _ \\ |___ /\n      | '_ \\/ __|/ _` |/ _ \\ \\ / / | | | |  |_ \\\n      | | | \\__ \\ (_| |  __/\\ V /  | |_| | ___) |\n      |_| |_|___/\\__,_|\\___| \\_/    \\___(_)____/\n  \n  When `hsdev 0.3` testing is complete (likely in the next 2-3 weeks) and Issue 399 is closed, you will have to *upgrade `hsdev` to the current 0.3 version*.\n  \n  ## In The Meantime... `hsdev 0.3.0.1`: Do Not Use\n  \n  Recently, `hsdev 0.3.0.1` was released, . If you installed `hsdev` since New Year's 2018, either via `cabal` or `stack`\n  \n      cabal install hsdev\n  \n  or\n  \n      stack install hsdev\n  \n  then type the following at your shell or command window's prompt:\n  \n      hsdev version\n  \n  If the version number does not start with `0.2`, you inadvertently installed an incompatible version. Version `0.3.0.1` support will be released soon, pending testing.\n  \n  To install the `0.2` series version that is compatible with _SublimeHaskell_:\n  \n      cabal install hsdev-0.2.5.1\n  \n  If you try:\n  \n      stack install hsdev-0.2.5.1\n  \n  `stack` will complain about `haddock-api` and `hdocs` incompatibilities (the `stack.yaml` file probably needs updating.) Stick with `cabal install` for the time being.\n  \n  \n  ## In this release...\n  \n  **Issue 416 (follow-on)**: ST3 introduced a JSON format for color schemes; the default ST3 color schemes now use this format (`Monokai`, in particular.) Detect when a new format color scheme is being used, extract attributes from the JSON. Older XML color schemes still work. This fixes hover issues when using ST3 3157 and onward.\n  \n  **Issue 415**: Add a `lint_opts` setting, as requested, and pass these options to `hsdev` when executing the `lint` command. However, it turns out that `hsdev` doesn't actually use these options -- added for future `hsdev` fix.\n  \n  ## 2.1.30\n  \n  **Issue 417**: Do the right thing (DTRT) if the view's file name isn't set. SublimeEventViewer's do\\_activated should have checked for this.\n  \n  ## 2.1.29\n  \n  **Quick hotfix**: Fix typo in ST3 3156-specific code.\n  \n  ## 2.1.28\n  \n  **Issues 414, 416**: Fix a regression that was introduced during 2.1.25 to unify the _SublimeHaskell_ event viewer class. The hover and completion methods were accidentally deleted. Functionality restored.\n  \n  ## 2.1.26\n  \n  **Issue 408**: Add the 'sublimehaskell.marker' scopes to the Cubicle theme.\n  \n  ## 2.1.25\n  \n  **Issue 407**: Check/lint and prettify-on-save broken for two reasons. First, _SublimeText_ stores persistent metadata about a file's view, which stored the old \"improved\" syntax file's name. Consequently the check for Haskell source would fail. Second, ST3 Build 3157 changed the event listener API once again, breaking post-save command actions.\n  \n  **Issue 404**: _SublimeREPL_'s \"external id\" is used for both the view's name *and* for the name of a persistent history file. Translate any illegal Windows file name characters to underscores and dashes (\"\\_\" and \"-\").\n  \n  ## 2.1.24\n  \n  **Issue 401**: Fix traceback in `check_lint.py`.\n  \n  ## 2.1.23\n  \n  **Issue 395**: _SublimeHaskell_ will now pop up a message dialog if you installed a version of `hsdev` that is incompatible (see the notes above about `hsdev 0.3.x.y` incompatibility.) You will also get a message dialog if you have a backend configuration that cannot execute or find the `hsdev` executable.\n  \n  **Haskell (improved) syntax highlighting**: Automagically converted the _SublimeText 2_ syntax definitions to the newer _SublimeText 3_ `YAML` format. There shouldn't be any noticeable changes to highlighting (except for Issue 387, below.) In other words, this should be no worse than what existed versions prior to `2.1.23`. Hopefully. With fingers crossed.\n  \n  The previous \"improved\" syntax highlighting is still accessible. To use that syntax highlighter, look for _SublimeHaskell_ syntaxes that start with \"_ST2_\".\n  \n  **Issue 387**: Underscores in numeric literals are now recognized, as are hexadecimal floating point literals (@iamrecursion should be beaming now.) You can now write:\n  \n      upperAddr :: Int\n      upperAddr = 0x_7fff_ffff\n  \n  Note: Just because you can write this in your code doesn't mean that the GHC compiler will accept it.\n  \n  ## 2.1.22\n  \n  **ghc-mod error messages**: Error messages generated by `ghc-mod` are now just logged to a project-specific panel. These messages have nothing to do with the success or failure of commands sent to `ghc-mod`; they are just the error output from `ghc-mod`. The panel will show itself when `ghc-mod` is started for a project directory. It can be closed to preserve screen real estate.\n  \n  **Project selection list for multi-project builds**: This selection list was broken. If you have multiple projects within a directory, `hsdev` will detect them. When you use _SublimeHaskell_ `build`, you will be prompted for which project to build.\n  \n  **Parsing multiple error messages from GHC's output**: Fixed the regular expression that collects error messages generated by `GHC`. It needed a negative lookahead to detect the next error message's start.\n  \n  **Pull request 393**: Rename the improved Haskell syntax \"Haskell (improved)\" to better distinguish it from the ordinary Haskell syntax highlighting scheme.\n  \n  ## 2.1.21\n  \n  **Issue  394**: Fix a bad merge from the `hsdev-3` branch. Check/lint and fly mode should now work correctly, without spurious messages.\n  \n  ## 2.1.20\n  \n  **Issue 396**: Arrange for the code prettifier to execute after a successful build-on-save (i.e., `enable_auto_build` is `true`).\n  \n  ## 2.1.19\n  \n  **hsdev backend cleanups**: Pre-emptive cleanups to the `hsdev` backend to prevent request processing deadlocks across threads. Also ensure that post-save processing occurs inside the UI thread.\n  \n  ## 2.1.18\n  \n  **Check/Lint is asynchronous again**: By popular demand, post-save check/lint is now asynchronous again. Tested with the _none_ and _ghc-mod_ backends to ensure that indenter runs as expected (and, yes, really, it does.)\n  \n  **Pull #378**: `GHCI Repl` command should always be available/visible.\n  \n  ## 2.1.17\n  \n  **Issue 390**: Inadvertantly reversed parameters produced the incorrect file names when parsing `build` output, which disabled the ability to click on the error report's file name, line and column.\n  \n  ## 2.1.16\n  \n  **Issue 380**: Make the \"None\" and \"ghc-mod\" backends play nicely with build/check/lint.\n  \n  ## 2.1.15\n  \n  **Issue 384**: Identified the circumstances under which the `stylish` and `hindent` commands were disabled, when trying to prettify a \"lone\" file (Haskell source that isn't part of a `cabal` project).\n  \n  ## 2.1.14\n  \n  **Issues 380, 384**: Make the indenter code simple, dumb and unsophisticated. Do not subclass off `sublime_plugin` classes, since this does not appear to work. Should resolve most of, hopefully, all of, issues related to indenters prettifying-on-save. (Does not stop output window flicker reported in issue 383.)\n  \n  **Issues 381, 382**: Minimize the quantity of files and databases scanned on each re-inspection pass, e.g., after a save or fly check. Found stale data being carried from inspection pass to inspection pass; ensure that the data is deleted properly.\n  \n  **Fly check**: Refactor the way fly check mode waits for a check to complete, without using class variables in other modules. Less hacky solution.\n  \n  ## 2.1.12\n  \n  **Fly mode break-fix**: Propagate a class rename in the `check_lint` module to `fly_check`.\n  \n  ## 2.1.11\n  \n  **Indent-on-save**: Should be fixed (again).\n  \n  **Refactored `hsdev` backend communication**: While fixing *indent-on-save*, discovered a few quirks in `hsdev` backend communication.\n  \n  ## Combined 2.1.0 - 2.1.10 changes\n  \n  - Fix a traceback in `HsDevBackend.files_and_contents`; `None` is usually passed in as a default, not an empty dictionary.\n  \n  - Revert some `sublime_plugin.ViewEventListener` refactoring, since the API was only recently \"enhanced\" (Build 3155 -- most users are on Build 3146.)\n  \n  **Fly mode**: Checking or linting after a pause in typing, aka \"fly mode\", now works reliably again. To enable, add the following to your user settings:\n  \n      \"lint_check_fly\": true\n  \n  You can control the idle time that _SublimeHaskell_ waits before initiating checking or linting via the `lint_check_fly_idle ` setting. The default is 5 seconds. You should not set this to a value lower than 3 seconds or checks/lints can occur faster than you can type (although there is nothing to stop you from doing so in the code. Yet.)\n  \n  **Issue 374 (enhancement)**: Limiting the error, warning and hints displayed in the _Sublime Haskell Output Window_ after a check, lint or build is now supported via the `show_only` setting:\n  \n      \"show_only\": {\n          \"errors\": true,\n          \"warnings\": true,\n          \"hints\": true\n      },\n  \n  The `show_only` setting can be customized as _SublimeHaskell_ project setting, i.e., from within a `.sublime-project` file:\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\":\n          {\n            \"show_only\": {\n                \"errors\": true,\n                \"warnings\": true,\n                \"hints\": true\n            },\n          }\n      }\n  \n  **Issue 365**: Rethink how plugin preferences are stored in the `SettingsContainer` object; use Python properties instead of being clever with instance attributes. Property setters allow validity testing when new preference values are read.\n  \n  **Issue 377 (possible 373, 359)**: @coodoo noticed a `UnicodeDecodeError` traceback after saves, which turns out to be a short read from the backend's socket -- more data is available, which SublimeHaskell should continue to read in order to ensure that decode('utf-8') succeeds. The fix here is to continue reading from the socket if decode('utf-8') raises the UnicodeDecodeError exception.  If no exception is raised, then split and process what looks like a complete request.\n  \n  This probably also fixes issues 373 and 359, which manifested similar behavior, but without the traceback.\n  \n  **Issues 375, 376 (duplicate)**: Make the \"local\", \"exec-with\" and \"install-dir\" `hsdev` backend options work together properly. If, for some reason, a backend has \"local\" set but either \"exec-with\" or \"install-dir\" isn't set, SublimeHaskell should not generate a backtrace. It should just mark the particular backend as unusable and continue onward.\n  \n  **Fix REPL support**: REPL support was supported solely via `cabal repl` and the code supporting Haskell REPLs itself needed re-evaluation. All execution wrappers are now supported: `cabal repl`, `cabal new-repl` and `stack repl`.\n  \n  *NOTE: The `haskell_build_tool` setting determines which execution wrapper is used. `haskell_build_tool` can be a project-specific setting, not just a default or user preference. See below in Release 2.1.3.*\n  \n  **Fix status line issues**: There was a long standing bug with SublimeHaskell's use and manipulation of the status line. The main manifestation was a thread that repeatedly updated the status line every 0.2 seconds -- it wasn't always perceivable because there wasn't any noticeable flicker. This fix should cut down in CPU and thread usage that this issue may have caused.\n  \n  **'SublimeHaskell: Reinspect All' now asynchronous**: This command now does its work asynchronously. Previously, it did its work in the SublimeText UI thread, leading to perceived hangs.\n  \n  **Issue 371**: Revert a spurious change to a `hsdev` backend method (that was supposed to be reverted.)\n  \n  **SublimeHaskell: Run**: Make running project executables play nicely with execution wrappers (e.g., `cabal run`, `stack exec`, `cabal new-run`). Eliminated the 'SublimeHaskell: Stack Exec' item because all of the functionality is included in 'SublimeHaskell: Run'. This change eliminates all of the previous gymnastics required to locate the executable in the first place.\n  \n  `SublimeHaskell: Run` will also prompt for command line arguments, which are parsed into a Python list by the `shlex` package. Arguments will persist across command invocations and Sublime Text sessions.\n  \n  **Issue 365**: More linting on the `prettify_exectable` setting. Someday, we'll know where the \"{0}\" comes from.\n  \n  **Issue 361**: Add `cabal new-test` support in the `SublimeHaskell: Test` command. Restored automatic testing after a successful build; automatic benchmarking is also possible after a successful build. See **auto_build_mode** note below.\n  \n  **Issue 344**: Most, if not all, 'cabal new-*' commands should be available, including `new-freeze` and `new-bench`. Corresponding commands for regular `cabal` and `stack` (as applicable) implemented. The major hack is that `cabal-new-build` does not have a clean command, so this is implemented as a function inside the SublimeHaskell builder.\n  \n  **auto_build_mode change**: The `auto_run_tests` setting is now deprecated. Its functionality is now replaced by two new build modes: *normal-then-test* (run tests after a successful build) and *normal-then-bench* (run benchmarks after a successful build.) SublimeHaskell will pop up an information dialog if `auto_run_tests` is in your preferences.\n  \n  **Project Settings**: All SublimeHaskell-related project settings are now contained within the `SublimeHaskell` dictionary. This allows you to encapsulate certain settings, like `haskell_build_tool`, on a per-project basis instead of via user preferences. There is more information at the bottom of the `SublimeHaskell.sublime-settings` (default plugin settings) file.\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\": {\n          \"haskell_build_tool\": \"cabal-new-build\"\n        }\n      }\n  \n  **build.py**: Code cleanups related to building Haskell applications, mostly related to better class structure, fewer global variables. (Related to issues 361 and 344.)\n  \n  **`pylint` cleanups**: `pylint` has updated, lots of new warnings. Fix code to bring them down to a dull roar.\n  \n  **Issue 366**: Word and default completions did not produce results, which became apparent while using the \"none\" backend. Removed the `inhibit_completions` setting because its purpose was confusing. Added two new settings, `add_word_completions` and `add_default_completions`. `add_word_completions` adds words in the source file that are more than three characters; this is a SublimeText feature that SublimeHaskell normally inhibits. `add_default_completions` adds the contents of the `Haskell.sublime-completions` file, which SublimeHaskell normally inhibits as well. Both settings default to `false`. (H/T to @Pastafarianist.)\n  \n  **ghc-mod**: Completions now work again, modeled off the `ghc-mod/elisp/ghc-comp.el` code. It's not perfect, but it suffices to improve developer productivity.\n  \n  **Issue 365 (partial)**: Fix dignostic message when SublimeHaskell doesn't accept the `prettify_executable` setting's value.\n  \n  **Issue 364**: `SublimeHaskell: Test` actually invoked the `install` task, not the `test` task. Also added `SublimeHaskell - Test` to the \"Build With...\" menu. Issue fixed.\n  \n  **Issue 352**: Add command line options for `stylish-haskell` and `hindent`. NOTE: These are lists, not strings.\n  \n  ## Upcoming Development Milestones\n  \n  Upcoming development milestones, listed in order of priority:\n  \n  ### The SublimeHaskell Editing Guide (Ongoing)\n  \n  Documentation is always a good thing. The guide is a work-in-progress.\n\n  *SublimeHaskell* 2.1.30\n  =======================\n  \n  SublimeHaskell 2.1.x is a release tree for minor enhancements and fixes to newly identified (and resolved) issues.\n  \n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  \n  This ensures that stale versions of internal *SublimeHaskell* Python modules don't cause problems when *PackageControl* reloads the plugin. *SublimeHaskell* does not (and cannot) forcibly reload its own internal modules and has no control over how *PackageControl* reloads a plugin.\n  \n  ## Coming Soon to SublimeHaskell\n  \n       _             _               ___   _____\n      | |__  ___  __| | _____   __  / _ \\ |___ /\n      | '_ \\/ __|/ _` |/ _ \\ \\ / / | | | |  |_ \\\n      | | | \\__ \\ (_| |  __/\\ V /  | |_| | ___) |\n      |_| |_|___/\\__,_|\\___| \\_/    \\___(_)____/\n  \n  When `hsdev 0.3` testing is complete (likely in the next 2-3 weeks) and Issue 399 is closed, you will have to *upgrade `hsdev` to the current 0.3 version*.\n  \n  ## In The Meantime... `hsdev 0.3.0.1`: Do Not Use\n  \n  Recently, `hsdev 0.3.0.1` was released, . If you installed `hsdev` since New Year's 2018, either via `cabal` or `stack`\n  \n      cabal install hsdev\n  \n  or\n  \n      stack install hsdev\n  \n  then type the following at your shell or command window's prompt:\n  \n      hsdev version\n  \n  If the version number does not start with `0.2`, you inadvertently installed an incompatible version. Version `0.3.0.1` support will be released soon, pending testing.\n  \n  To install the `0.2` series version that is compatible with _SublimeHaskell_:\n  \n      cabal install hsdev-0.2.5.1\n  \n  If you try:\n  \n      stack install hsdev-0.2.5.1\n  \n  `stack` will complain about `haddock-api` and `hdocs` incompatibilities (the `stack.yaml` file probably needs updating.) Stick with `cabal install` for the time being.\n  \n  \n  ## In this release...\n  \n  **Issue 417**: Do the right thing (DTRT) if the view's file name isn't set. SublimeEventViewer's do\\_activated should have checked for this.\n  \n  ## 2.1.29\n  \n  **Quick hotfix**: Fix typo in ST3 3156-specific code.\n  \n  ## 2.1.28\n  \n  **Issues 414, 416**: Fix a regression that was introduced during 2.1.25 to unify the _SublimeHaskell_ event viewer class. The hover and completion methods were accidentally deleted. Functionality restored.\n  \n  ## 2.1.26\n  \n  **Issue 408**: Add the 'sublimehaskell.marker' scopes to the Cubicle theme.\n  \n  ## 2.1.25\n  \n  **Issue 407**: Check/lint and prettify-on-save broken for two reasons. First, _SublimeText_ stores persistent metadata about a file's view, which stored the old \"improved\" syntax file's name. Consequently the check for Haskell source would fail. Second, ST3 Build 3157 changed the event listener API once again, breaking post-save command actions.\n  \n  **Issue 404**: _SublimeREPL_'s \"external id\" is used for both the view's name *and* for the name of a persistent history file. Translate any illegal Windows file name characters to underscores and dashes (\"\\_\" and \"-\").\n  \n  ## 2.1.24\n  \n  **Issue 401**: Fix traceback in `check_lint.py`.\n  \n  ## 2.1.23\n  \n  **Issue 395**: _SublimeHaskell_ will now pop up a message dialog if you installed a version of `hsdev` that is incompatible (see the notes above about `hsdev 0.3.x.y` incompatibility.) You will also get a message dialog if you have a backend configuration that cannot execute or find the `hsdev` executable.\n  \n  **Haskell (improved) syntax highlighting**: Automagically converted the _SublimeText 2_ syntax definitions to the newer _SublimeText 3_ `YAML` format. There shouldn't be any noticeable changes to highlighting (except for Issue 387, below.) In other words, this should be no worse than what existed versions prior to `2.1.23`. Hopefully. With fingers crossed.\n  \n  The previous \"improved\" syntax highlighting is still accessible. To use that syntax highlighter, look for _SublimeHaskell_ syntaxes that start with \"_ST2_\".\n  \n  **Issue 387**: Underscores in numeric literals are now recognized, as are hexadecimal floating point literals (@iamrecursion should be beaming now.) You can now write:\n  \n      upperAddr :: Int\n      upperAddr = 0x_7fff_ffff\n  \n  Note: Just because you can write this in your code doesn't mean that the GHC compiler will accept it.\n  \n  ## 2.1.22\n  \n  **ghc-mod error messages**: Error messages generated by `ghc-mod` are now just logged to a project-specific panel. These messages have nothing to do with the success or failure of commands sent to `ghc-mod`; they are just the error output from `ghc-mod`. The panel will show itself when `ghc-mod` is started for a project directory. It can be closed to preserve screen real estate.\n  \n  **Project selection list for multi-project builds**: This selection list was broken. If you have multiple projects within a directory, `hsdev` will detect them. When you use _SublimeHaskell_ `build`, you will be prompted for which project to build.\n  \n  **Parsing multiple error messages from GHC's output**: Fixed the regular expression that collects error messages generated by `GHC`. It needed a negative lookahead to detect the next error message's start.\n  \n  **Pull request 393**: Rename the improved Haskell syntax \"Haskell (improved)\" to better distinguish it from the ordinary Haskell syntax highlighting scheme.\n  \n  ## 2.1.21\n  \n  **Issue  394**: Fix a bad merge from the `hsdev-3` branch. Check/lint and fly mode should now work correctly, without spurious messages.\n  \n  ## 2.1.20\n  \n  **Issue 396**: Arrange for the code prettifier to execute after a successful build-on-save (i.e., `enable_auto_build` is `true`).\n  \n  ## 2.1.19\n  \n  **hsdev backend cleanups**: Pre-emptive cleanups to the `hsdev` backend to prevent request processing deadlocks across threads. Also ensure that post-save processing occurs inside the UI thread.\n  \n  ## 2.1.18\n  \n  **Check/Lint is asynchronous again**: By popular demand, post-save check/lint is now asynchronous again. Tested with the _none_ and _ghc-mod_ backends to ensure that indenter runs as expected (and, yes, really, it does.)\n  \n  **Pull #378**: `GHCI Repl` command should always be available/visible.\n  \n  ## 2.1.17\n  \n  **Issue 390**: Inadvertantly reversed parameters produced the incorrect file names when parsing `build` output, which disabled the ability to click on the error report's file name, line and column.\n  \n  ## 2.1.16\n  \n  **Issue 380**: Make the \"None\" and \"ghc-mod\" backends play nicely with build/check/lint.\n  \n  ## 2.1.15\n  \n  **Issue 384**: Identified the circumstances under which the `stylish` and `hindent` commands were disabled, when trying to prettify a \"lone\" file (Haskell source that isn't part of a `cabal` project).\n  \n  ## 2.1.14\n  \n  **Issues 380, 384**: Make the indenter code simple, dumb and unsophisticated. Do not subclass off `sublime_plugin` classes, since this does not appear to work. Should resolve most of, hopefully, all of, issues related to indenters prettifying-on-save. (Does not stop output window flicker reported in issue 383.)\n  \n  **Issues 381, 382**: Minimize the quantity of files and databases scanned on each re-inspection pass, e.g., after a save or fly check. Found stale data being carried from inspection pass to inspection pass; ensure that the data is deleted properly.\n  \n  **Fly check**: Refactor the way fly check mode waits for a check to complete, without using class variables in other modules. Less hacky solution.\n  \n  ## 2.1.12\n  \n  **Fly mode break-fix**: Propagate a class rename in the `check_lint` module to `fly_check`.\n  \n  ## 2.1.11\n  \n  **Indent-on-save**: Should be fixed (again).\n  \n  **Refactored `hsdev` backend communication**: While fixing *indent-on-save*, discovered a few quirks in `hsdev` backend communication.\n  \n  ## Combined 2.1.0 - 2.1.10 changes\n  \n  - Fix a traceback in `HsDevBackend.files_and_contents`; `None` is usually passed in as a default, not an empty dictionary.\n  \n  - Revert some `sublime_plugin.ViewEventListener` refactoring, since the API was only recently \"enhanced\" (Build 3155 -- most users are on Build 3146.)\n  \n  **Fly mode**: Checking or linting after a pause in typing, aka \"fly mode\", now works reliably again. To enable, add the following to your user settings:\n  \n      \"lint_check_fly\": true\n  \n  You can control the idle time that _SublimeHaskell_ waits before initiating checking or linting via the `lint_check_fly_idle ` setting. The default is 5 seconds. You should not set this to a value lower than 3 seconds or checks/lints can occur faster than you can type (although there is nothing to stop you from doing so in the code. Yet.)\n  \n  **Issue 374 (enhancement)**: Limiting the error, warning and hints displayed in the _Sublime Haskell Output Window_ after a check, lint or build is now supported via the `show_only` setting:\n  \n      \"show_only\": {\n          \"errors\": true,\n          \"warnings\": true,\n          \"hints\": true\n      },\n  \n  The `show_only` setting can be customized as _SublimeHaskell_ project setting, i.e., from within a `.sublime-project` file:\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\":\n          {\n            \"show_only\": {\n                \"errors\": true,\n                \"warnings\": true,\n                \"hints\": true\n            },\n          }\n      }\n  \n  **Issue 365**: Rethink how plugin preferences are stored in the `SettingsContainer` object; use Python properties instead of being clever with instance attributes. Property setters allow validity testing when new preference values are read.\n  \n  **Issue 377 (possible 373, 359)**: @coodoo noticed a `UnicodeDecodeError` traceback after saves, which turns out to be a short read from the backend's socket -- more data is available, which SublimeHaskell should continue to read in order to ensure that decode('utf-8') succeeds. The fix here is to continue reading from the socket if decode('utf-8') raises the UnicodeDecodeError exception.  If no exception is raised, then split and process what looks like a complete request.\n  \n  This probably also fixes issues 373 and 359, which manifested similar behavior, but without the traceback.\n  \n  **Issues 375, 376 (duplicate)**: Make the \"local\", \"exec-with\" and \"install-dir\" `hsdev` backend options work together properly. If, for some reason, a backend has \"local\" set but either \"exec-with\" or \"install-dir\" isn't set, SublimeHaskell should not generate a backtrace. It should just mark the particular backend as unusable and continue onward.\n  \n  **Fix REPL support**: REPL support was supported solely via `cabal repl` and the code supporting Haskell REPLs itself needed re-evaluation. All execution wrappers are now supported: `cabal repl`, `cabal new-repl` and `stack repl`.\n  \n  *NOTE: The `haskell_build_tool` setting determines which execution wrapper is used. `haskell_build_tool` can be a project-specific setting, not just a default or user preference. See below in Release 2.1.3.*\n  \n  **Fix status line issues**: There was a long standing bug with SublimeHaskell's use and manipulation of the status line. The main manifestation was a thread that repeatedly updated the status line every 0.2 seconds -- it wasn't always perceivable because there wasn't any noticeable flicker. This fix should cut down in CPU and thread usage that this issue may have caused.\n  \n  **'SublimeHaskell: Reinspect All' now asynchronous**: This command now does its work asynchronously. Previously, it did its work in the SublimeText UI thread, leading to perceived hangs.\n  \n  **Issue 371**: Revert a spurious change to a `hsdev` backend method (that was supposed to be reverted.)\n  \n  **SublimeHaskell: Run**: Make running project executables play nicely with execution wrappers (e.g., `cabal run`, `stack exec`, `cabal new-run`). Eliminated the 'SublimeHaskell: Stack Exec' item because all of the functionality is included in 'SublimeHaskell: Run'. This change eliminates all of the previous gymnastics required to locate the executable in the first place.\n  \n  `SublimeHaskell: Run` will also prompt for command line arguments, which are parsed into a Python list by the `shlex` package. Arguments will persist across command invocations and Sublime Text sessions.\n  \n  **Issue 365**: More linting on the `prettify_exectable` setting. Someday, we'll know where the \"{0}\" comes from.\n  \n  **Issue 361**: Add `cabal new-test` support in the `SublimeHaskell: Test` command. Restored automatic testing after a successful build; automatic benchmarking is also possible after a successful build. See **auto_build_mode** note below.\n  \n  **Issue 344**: Most, if not all, 'cabal new-*' commands should be available, including `new-freeze` and `new-bench`. Corresponding commands for regular `cabal` and `stack` (as applicable) implemented. The major hack is that `cabal-new-build` does not have a clean command, so this is implemented as a function inside the SublimeHaskell builder.\n  \n  **auto_build_mode change**: The `auto_run_tests` setting is now deprecated. Its functionality is now replaced by two new build modes: *normal-then-test* (run tests after a successful build) and *normal-then-bench* (run benchmarks after a successful build.) SublimeHaskell will pop up an information dialog if `auto_run_tests` is in your preferences.\n  \n  **Project Settings**: All SublimeHaskell-related project settings are now contained within the `SublimeHaskell` dictionary. This allows you to encapsulate certain settings, like `haskell_build_tool`, on a per-project basis instead of via user preferences. There is more information at the bottom of the `SublimeHaskell.sublime-settings` (default plugin settings) file.\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\": {\n          \"haskell_build_tool\": \"cabal-new-build\"\n        }\n      }\n  \n  **build.py**: Code cleanups related to building Haskell applications, mostly related to better class structure, fewer global variables. (Related to issues 361 and 344.)\n  \n  **`pylint` cleanups**: `pylint` has updated, lots of new warnings. Fix code to bring them down to a dull roar.\n  \n  **Issue 366**: Word and default completions did not produce results, which became apparent while using the \"none\" backend. Removed the `inhibit_completions` setting because its purpose was confusing. Added two new settings, `add_word_completions` and `add_default_completions`. `add_word_completions` adds words in the source file that are more than three characters; this is a SublimeText feature that SublimeHaskell normally inhibits. `add_default_completions` adds the contents of the `Haskell.sublime-completions` file, which SublimeHaskell normally inhibits as well. Both settings default to `false`. (H/T to @Pastafarianist.)\n  \n  **ghc-mod**: Completions now work again, modeled off the `ghc-mod/elisp/ghc-comp.el` code. It's not perfect, but it suffices to improve developer productivity.\n  \n  **Issue 365 (partial)**: Fix dignostic message when SublimeHaskell doesn't accept the `prettify_executable` setting's value.\n  \n  **Issue 364**: `SublimeHaskell: Test` actually invoked the `install` task, not the `test` task. Also added `SublimeHaskell - Test` to the \"Build With...\" menu. Issue fixed.\n  \n  **Issue 352**: Add command line options for `stylish-haskell` and `hindent`. NOTE: These are lists, not strings.\n  \n  ## Upcoming Development Milestones\n  \n  Upcoming development milestones, listed in order of priority:\n  \n  ### The SublimeHaskell Editing Guide (Ongoing)\n  \n  Documentation is always a good thing. The guide is a work-in-progress.\n\n  *SublimeHaskell* 2.1.29\n  =======================\n  \n  SublimeHaskell 2.1.x is a release tree for minor enhancements and fixes to newly identified (and resolved) issues.\n  \n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  \n  This ensures that stale versions of internal *SublimeHaskell* Python modules don't cause problems when *PackageControl* reloads the plugin. *SublimeHaskell* does not (and cannot) forcibly reload its own internal modules and has no control over how *PackageControl* reloads a plugin.\n  \n  ## Coming Soon to SublimeHaskell\n  \n       _             _               ___   _____\n      | |__  ___  __| | _____   __  / _ \\ |___ /\n      | '_ \\/ __|/ _` |/ _ \\ \\ / / | | | |  |_ \\\n      | | | \\__ \\ (_| |  __/\\ V /  | |_| | ___) |\n      |_| |_|___/\\__,_|\\___| \\_/    \\___(_)____/\n  \n  When `hsdev 0.3` testing is complete (likely in the next 2-3 weeks) and Issue 399 is closed, you will have to *upgrade `hsdev` to the current 0.3 version*.\n  \n  ## In The Meantime... `hsdev 0.3.0.1`: Do Not Use\n  \n  Recently, `hsdev 0.3.0.1` was released, . If you installed `hsdev` since New Year's 2018, either via `cabal` or `stack`\n  \n      cabal install hsdev\n  \n  or\n  \n      stack install hsdev\n  \n  then type the following at your shell or command window's prompt:\n  \n      hsdev version\n  \n  If the version number does not start with `0.2`, you inadvertently installed an incompatible version. Version `0.3.0.1` support will be released soon, pending testing.\n  \n  To install the `0.2` series version that is compatible with _SublimeHaskell_:\n  \n      cabal install hsdev-0.2.5.1\n  \n  If you try:\n  \n      stack install hsdev-0.2.5.1\n  \n  `stack` will complain about `haddock-api` and `hdocs` incompatibilities (the `stack.yaml` file probably needs updating.) Stick with `cabal install` for the time being.\n  \n  \n  ## In this release...\n  \n  **Quick hotfix**: Fix typo in ST3 3156-specific code.\n  \n  ## 2.1.26\n  \n  **Issues 414, 416**: Fix a regression that was introduced during 2.1.25 to unify the _SublimeHaskell_ event viewer class. The hover and completion methods were accidentally deleted. Functionality restored.\n  \n  ## 2.1.26\n  \n  **Issue 408**: Add the 'sublimehaskell.marker' scopes to the Cubicle theme.\n  \n  ## 2.1.25\n  \n  **Issue 407**: Check/lint and prettify-on-save broken for two reasons. First, _SublimeText_ stores persistent metadata about a file's view, which stored the old \"improved\" syntax file's name. Consequently the check for Haskell source would fail. Second, ST3 Build 3157 changed the event listener API once again, breaking post-save command actions.\n  \n  **Issue 404**: _SublimeREPL_'s \"external id\" is used for both the view's name *and* for the name of a persistent history file. Translate any illegal Windows file name characters to underscores and dashes (\"\\_\" and \"-\").\n  \n  ## 2.1.24\n  \n  **Issue 401**: Fix traceback in `check_lint.py`.\n  \n  ## 2.1.23\n  \n  **Issue 395**: _SublimeHaskell_ will now pop up a message dialog if you installed a version of `hsdev` that is incompatible (see the notes above about `hsdev 0.3.x.y` incompatibility.) You will also get a message dialog if you have a backend configuration that cannot execute or find the `hsdev` executable.\n  \n  **Haskell (improved) syntax highlighting**: Automagically converted the _SublimeText 2_ syntax definitions to the newer _SublimeText 3_ `YAML` format. There shouldn't be any noticeable changes to highlighting (except for Issue 387, below.) In other words, this should be no worse than what existed versions prior to `2.1.23`. Hopefully. With fingers crossed.\n  \n  The previous \"improved\" syntax highlighting is still accessible. To use that syntax highlighter, look for _SublimeHaskell_ syntaxes that start with \"_ST2_\".\n  \n  **Issue 387**: Underscores in numeric literals are now recognized, as are hexadecimal floating point literals (@iamrecursion should be beaming now.) You can now write:\n  \n      upperAddr :: Int\n      upperAddr = 0x_7fff_ffff\n  \n  Note: Just because you can write this in your code doesn't mean that the GHC compiler will accept it.\n  \n  ## 2.1.22\n  \n  **ghc-mod error messages**: Error messages generated by `ghc-mod` are now just logged to a project-specific panel. These messages have nothing to do with the success or failure of commands sent to `ghc-mod`; they are just the error output from `ghc-mod`. The panel will show itself when `ghc-mod` is started for a project directory. It can be closed to preserve screen real estate.\n  \n  **Project selection list for multi-project builds**: This selection list was broken. If you have multiple projects within a directory, `hsdev` will detect them. When you use _SublimeHaskell_ `build`, you will be prompted for which project to build.\n  \n  **Parsing multiple error messages from GHC's output**: Fixed the regular expression that collects error messages generated by `GHC`. It needed a negative lookahead to detect the next error message's start.\n  \n  **Pull request 393**: Rename the improved Haskell syntax \"Haskell (improved)\" to better distinguish it from the ordinary Haskell syntax highlighting scheme.\n  \n  ## 2.1.21\n  \n  **Issue  394**: Fix a bad merge from the `hsdev-3` branch. Check/lint and fly mode should now work correctly, without spurious messages.\n  \n  ## 2.1.20\n  \n  **Issue 396**: Arrange for the code prettifier to execute after a successful build-on-save (i.e., `enable_auto_build` is `true`).\n  \n  ## 2.1.19\n  \n  **hsdev backend cleanups**: Pre-emptive cleanups to the `hsdev` backend to prevent request processing deadlocks across threads. Also ensure that post-save processing occurs inside the UI thread.\n  \n  ## 2.1.18\n  \n  **Check/Lint is asynchronous again**: By popular demand, post-save check/lint is now asynchronous again. Tested with the _none_ and _ghc-mod_ backends to ensure that indenter runs as expected (and, yes, really, it does.)\n  \n  **Pull #378**: `GHCI Repl` command should always be available/visible.\n  \n  ## 2.1.17\n  \n  **Issue 390**: Inadvertantly reversed parameters produced the incorrect file names when parsing `build` output, which disabled the ability to click on the error report's file name, line and column.\n  \n  ## 2.1.16\n  \n  **Issue 380**: Make the \"None\" and \"ghc-mod\" backends play nicely with build/check/lint.\n  \n  ## 2.1.15\n  \n  **Issue 384**: Identified the circumstances under which the `stylish` and `hindent` commands were disabled, when trying to prettify a \"lone\" file (Haskell source that isn't part of a `cabal` project).\n  \n  ## 2.1.14\n  \n  **Issues 380, 384**: Make the indenter code simple, dumb and unsophisticated. Do not subclass off `sublime_plugin` classes, since this does not appear to work. Should resolve most of, hopefully, all of, issues related to indenters prettifying-on-save. (Does not stop output window flicker reported in issue 383.)\n  \n  **Issues 381, 382**: Minimize the quantity of files and databases scanned on each re-inspection pass, e.g., after a save or fly check. Found stale data being carried from inspection pass to inspection pass; ensure that the data is deleted properly.\n  \n  **Fly check**: Refactor the way fly check mode waits for a check to complete, without using class variables in other modules. Less hacky solution.\n  \n  ## 2.1.12\n  \n  **Fly mode break-fix**: Propagate a class rename in the `check_lint` module to `fly_check`.\n  \n  ## 2.1.11\n  \n  **Indent-on-save**: Should be fixed (again).\n  \n  **Refactored `hsdev` backend communication**: While fixing *indent-on-save*, discovered a few quirks in `hsdev` backend communication.\n  \n  ## Combined 2.1.0 - 2.1.10 changes\n  \n  - Fix a traceback in `HsDevBackend.files_and_contents`; `None` is usually passed in as a default, not an empty dictionary.\n  \n  - Revert some `sublime_plugin.ViewEventListener` refactoring, since the API was only recently \"enhanced\" (Build 3155 -- most users are on Build 3146.)\n  \n  **Fly mode**: Checking or linting after a pause in typing, aka \"fly mode\", now works reliably again. To enable, add the following to your user settings:\n  \n      \"lint_check_fly\": true\n  \n  You can control the idle time that _SublimeHaskell_ waits before initiating checking or linting via the `lint_check_fly_idle ` setting. The default is 5 seconds. You should not set this to a value lower than 3 seconds or checks/lints can occur faster than you can type (although there is nothing to stop you from doing so in the code. Yet.)\n  \n  **Issue 374 (enhancement)**: Limiting the error, warning and hints displayed in the _Sublime Haskell Output Window_ after a check, lint or build is now supported via the `show_only` setting:\n  \n      \"show_only\": {\n          \"errors\": true,\n          \"warnings\": true,\n          \"hints\": true\n      },\n  \n  The `show_only` setting can be customized as _SublimeHaskell_ project setting, i.e., from within a `.sublime-project` file:\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\":\n          {\n            \"show_only\": {\n                \"errors\": true,\n                \"warnings\": true,\n                \"hints\": true\n            },\n          }\n      }\n  \n  **Issue 365**: Rethink how plugin preferences are stored in the `SettingsContainer` object; use Python properties instead of being clever with instance attributes. Property setters allow validity testing when new preference values are read.\n  \n  **Issue 377 (possible 373, 359)**: @coodoo noticed a `UnicodeDecodeError` traceback after saves, which turns out to be a short read from the backend's socket -- more data is available, which SublimeHaskell should continue to read in order to ensure that decode('utf-8') succeeds. The fix here is to continue reading from the socket if decode('utf-8') raises the UnicodeDecodeError exception.  If no exception is raised, then split and process what looks like a complete request.\n  \n  This probably also fixes issues 373 and 359, which manifested similar behavior, but without the traceback.\n  \n  **Issues 375, 376 (duplicate)**: Make the \"local\", \"exec-with\" and \"install-dir\" `hsdev` backend options work together properly. If, for some reason, a backend has \"local\" set but either \"exec-with\" or \"install-dir\" isn't set, SublimeHaskell should not generate a backtrace. It should just mark the particular backend as unusable and continue onward.\n  \n  **Fix REPL support**: REPL support was supported solely via `cabal repl` and the code supporting Haskell REPLs itself needed re-evaluation. All execution wrappers are now supported: `cabal repl`, `cabal new-repl` and `stack repl`.\n  \n  *NOTE: The `haskell_build_tool` setting determines which execution wrapper is used. `haskell_build_tool` can be a project-specific setting, not just a default or user preference. See below in Release 2.1.3.*\n  \n  **Fix status line issues**: There was a long standing bug with SublimeHaskell's use and manipulation of the status line. The main manifestation was a thread that repeatedly updated the status line every 0.2 seconds -- it wasn't always perceivable because there wasn't any noticeable flicker. This fix should cut down in CPU and thread usage that this issue may have caused.\n  \n  **'SublimeHaskell: Reinspect All' now asynchronous**: This command now does its work asynchronously. Previously, it did its work in the SublimeText UI thread, leading to perceived hangs.\n  \n  **Issue 371**: Revert a spurious change to a `hsdev` backend method (that was supposed to be reverted.)\n  \n  **SublimeHaskell: Run**: Make running project executables play nicely with execution wrappers (e.g., `cabal run`, `stack exec`, `cabal new-run`). Eliminated the 'SublimeHaskell: Stack Exec' item because all of the functionality is included in 'SublimeHaskell: Run'. This change eliminates all of the previous gymnastics required to locate the executable in the first place.\n  \n  `SublimeHaskell: Run` will also prompt for command line arguments, which are parsed into a Python list by the `shlex` package. Arguments will persist across command invocations and Sublime Text sessions.\n  \n  **Issue 365**: More linting on the `prettify_exectable` setting. Someday, we'll know where the \"{0}\" comes from.\n  \n  **Issue 361**: Add `cabal new-test` support in the `SublimeHaskell: Test` command. Restored automatic testing after a successful build; automatic benchmarking is also possible after a successful build. See **auto_build_mode** note below.\n  \n  **Issue 344**: Most, if not all, 'cabal new-*' commands should be available, including `new-freeze` and `new-bench`. Corresponding commands for regular `cabal` and `stack` (as applicable) implemented. The major hack is that `cabal-new-build` does not have a clean command, so this is implemented as a function inside the SublimeHaskell builder.\n  \n  **auto_build_mode change**: The `auto_run_tests` setting is now deprecated. Its functionality is now replaced by two new build modes: *normal-then-test* (run tests after a successful build) and *normal-then-bench* (run benchmarks after a successful build.) SublimeHaskell will pop up an information dialog if `auto_run_tests` is in your preferences.\n  \n  **Project Settings**: All SublimeHaskell-related project settings are now contained within the `SublimeHaskell` dictionary. This allows you to encapsulate certain settings, like `haskell_build_tool`, on a per-project basis instead of via user preferences. There is more information at the bottom of the `SublimeHaskell.sublime-settings` (default plugin settings) file.\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\": {\n          \"haskell_build_tool\": \"cabal-new-build\"\n        }\n      }\n  \n  **build.py**: Code cleanups related to building Haskell applications, mostly related to better class structure, fewer global variables. (Related to issues 361 and 344.)\n  \n  **`pylint` cleanups**: `pylint` has updated, lots of new warnings. Fix code to bring them down to a dull roar.\n  \n  **Issue 366**: Word and default completions did not produce results, which became apparent while using the \"none\" backend. Removed the `inhibit_completions` setting because its purpose was confusing. Added two new settings, `add_word_completions` and `add_default_completions`. `add_word_completions` adds words in the source file that are more than three characters; this is a SublimeText feature that SublimeHaskell normally inhibits. `add_default_completions` adds the contents of the `Haskell.sublime-completions` file, which SublimeHaskell normally inhibits as well. Both settings default to `false`. (H/T to @Pastafarianist.)\n  \n  **ghc-mod**: Completions now work again, modeled off the `ghc-mod/elisp/ghc-comp.el` code. It's not perfect, but it suffices to improve developer productivity.\n  \n  **Issue 365 (partial)**: Fix dignostic message when SublimeHaskell doesn't accept the `prettify_executable` setting's value.\n  \n  **Issue 364**: `SublimeHaskell: Test` actually invoked the `install` task, not the `test` task. Also added `SublimeHaskell - Test` to the \"Build With...\" menu. Issue fixed.\n  \n  **Issue 352**: Add command line options for `stylish-haskell` and `hindent`. NOTE: These are lists, not strings.\n  \n  ## Upcoming Development Milestones\n  \n  Upcoming development milestones, listed in order of priority:\n  \n  ### The SublimeHaskell Editing Guide (Ongoing)\n  \n  Documentation is always a good thing. The guide is a work-in-progress.\n\n  *SublimeHaskell* 2.1.27\n  =======================\n  \n  SublimeHaskell 2.1.x is a release tree for minor enhancements and fixes to newly identified (and resolved) issues.\n  \n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  __RESTART SublimeText AFTER THIS UPDATE!!__<br>\n  \n  This ensures that stale versions of internal *SublimeHaskell* Python modules don't cause problems when *PackageControl* reloads the plugin. *SublimeHaskell* does not (and cannot) forcibly reload its own internal modules and has no control over how *PackageControl* reloads a plugin.\n  \n  ## Coming Soon to SublimeHaskell\n  \n       _             _               ___   _____\n      | |__  ___  __| | _____   __  / _ \\ |___ /\n      | '_ \\/ __|/ _` |/ _ \\ \\ / / | | | |  |_ \\\n      | | | \\__ \\ (_| |  __/\\ V /  | |_| | ___) |\n      |_| |_|___/\\__,_|\\___| \\_/    \\___(_)____/\n  \n  When `hsdev 0.3` testing is complete (likely in the next 2-3 weeks) and Issue 399 is closed, you will have to *upgrade `hsdev` to the current 0.3 version*.\n  \n  ## In The Meantime... `hsdev 0.3.0.1`: Do Not Use\n  \n  Recently, `hsdev 0.3.0.1` was released, . If you installed `hsdev` since New Year's 2018, either via `cabal` or `stack`\n  \n      cabal install hsdev\n  \n  or\n  \n      stack install hsdev\n  \n  then type the following at your shell or command window's prompt:\n  \n      hsdev version\n  \n  If the version number does not start with `0.2`, you inadvertently installed an incompatible version. Version `0.3.0.1` support will be released soon, pending testing.\n  \n  To install the `0.2` series version that is compatible with _SublimeHaskell_:\n  \n      cabal install hsdev-0.2.5.1\n  \n  If you try:\n  \n      stack install hsdev-0.2.5.1\n  \n  `stack` will complain about `haddock-api` and `hdocs` incompatibilities (the `stack.yaml` file probably needs updating.) Stick with `cabal install` for the time being.\n  \n  \n  ## In this release...\n  \n  **Issues 414, 416**: Fix a regression that was introduced during 2.1.25 to unify the _SublimeHaskell_ event viewer class. The hover and completion methods were accidentally deleted. Functionality restored.\n  \n  ## 2.1.26\n  \n  **Issue 408**: Add the 'sublimehaskell.marker' scopes to the Cubicle theme.\n  \n  ## 2.1.25\n  \n  **Issue 407**: Check/lint and prettify-on-save broken for two reasons. First, _SublimeText_ stores persistent metadata about a file's view, which stored the old \"improved\" syntax file's name. Consequently the check for Haskell source would fail. Second, ST3 Build 3157 changed the event listener API once again, breaking post-save command actions.\n  \n  **Issue 404**: _SublimeREPL_'s \"external id\" is used for both the view's name *and* for the name of a persistent history file. Translate any illegal Windows file name characters to underscores and dashes (\"\\_\" and \"-\").\n  \n  ## 2.1.24\n  \n  **Issue 401**: Fix traceback in `check_lint.py`.\n  \n  ## 2.1.23\n  \n  **Issue 395**: _SublimeHaskell_ will now pop up a message dialog if you installed a version of `hsdev` that is incompatible (see the notes above about `hsdev 0.3.x.y` incompatibility.) You will also get a message dialog if you have a backend configuration that cannot execute or find the `hsdev` executable.\n  \n  **Haskell (improved) syntax highlighting**: Automagically converted the _SublimeText 2_ syntax definitions to the newer _SublimeText 3_ `YAML` format. There shouldn't be any noticeable changes to highlighting (except for Issue 387, below.) In other words, this should be no worse than what existed versions prior to `2.1.23`. Hopefully. With fingers crossed.\n  \n  The previous \"improved\" syntax highlighting is still accessible. To use that syntax highlighter, look for _SublimeHaskell_ syntaxes that start with \"_ST2_\".\n  \n  **Issue 387**: Underscores in numeric literals are now recognized, as are hexadecimal floating point literals (@iamrecursion should be beaming now.) You can now write:\n  \n      upperAddr :: Int\n      upperAddr = 0x_7fff_ffff\n  \n  Note: Just because you can write this in your code doesn't mean that the GHC compiler will accept it.\n  \n  ## 2.1.22\n  \n  **ghc-mod error messages**: Error messages generated by `ghc-mod` are now just logged to a project-specific panel. These messages have nothing to do with the success or failure of commands sent to `ghc-mod`; they are just the error output from `ghc-mod`. The panel will show itself when `ghc-mod` is started for a project directory. It can be closed to preserve screen real estate.\n  \n  **Project selection list for multi-project builds**: This selection list was broken. If you have multiple projects within a directory, `hsdev` will detect them. When you use _SublimeHaskell_ `build`, you will be prompted for which project to build.\n  \n  **Parsing multiple error messages from GHC's output**: Fixed the regular expression that collects error messages generated by `GHC`. It needed a negative lookahead to detect the next error message's start.\n  \n  **Pull request 393**: Rename the improved Haskell syntax \"Haskell (improved)\" to better distinguish it from the ordinary Haskell syntax highlighting scheme.\n  \n  ## 2.1.21\n  \n  **Issue  394**: Fix a bad merge from the `hsdev-3` branch. Check/lint and fly mode should now work correctly, without spurious messages.\n  \n  ## 2.1.20\n  \n  **Issue 396**: Arrange for the code prettifier to execute after a successful build-on-save (i.e., `enable_auto_build` is `true`).\n  \n  ## 2.1.19\n  \n  **hsdev backend cleanups**: Pre-emptive cleanups to the `hsdev` backend to prevent request processing deadlocks across threads. Also ensure that post-save processing occurs inside the UI thread.\n  \n  ## 2.1.18\n  \n  **Check/Lint is asynchronous again**: By popular demand, post-save check/lint is now asynchronous again. Tested with the _none_ and _ghc-mod_ backends to ensure that indenter runs as expected (and, yes, really, it does.)\n  \n  **Pull #378**: `GHCI Repl` command should always be available/visible.\n  \n  ## 2.1.17\n  \n  **Issue 390**: Inadvertantly reversed parameters produced the incorrect file names when parsing `build` output, which disabled the ability to click on the error report's file name, line and column.\n  \n  ## 2.1.16\n  \n  **Issue 380**: Make the \"None\" and \"ghc-mod\" backends play nicely with build/check/lint.\n  \n  ## 2.1.15\n  \n  **Issue 384**: Identified the circumstances under which the `stylish` and `hindent` commands were disabled, when trying to prettify a \"lone\" file (Haskell source that isn't part of a `cabal` project).\n  \n  ## 2.1.14\n  \n  **Issues 380, 384**: Make the indenter code simple, dumb and unsophisticated. Do not subclass off `sublime_plugin` classes, since this does not appear to work. Should resolve most of, hopefully, all of, issues related to indenters prettifying-on-save. (Does not stop output window flicker reported in issue 383.)\n  \n  **Issues 381, 382**: Minimize the quantity of files and databases scanned on each re-inspection pass, e.g., after a save or fly check. Found stale data being carried from inspection pass to inspection pass; ensure that the data is deleted properly.\n  \n  **Fly check**: Refactor the way fly check mode waits for a check to complete, without using class variables in other modules. Less hacky solution.\n  \n  ## 2.1.12\n  \n  **Fly mode break-fix**: Propagate a class rename in the `check_lint` module to `fly_check`.\n  \n  ## 2.1.11\n  \n  **Indent-on-save**: Should be fixed (again).\n  \n  **Refactored `hsdev` backend communication**: While fixing *indent-on-save*, discovered a few quirks in `hsdev` backend communication.\n  \n  ## Combined 2.1.0 - 2.1.10 changes\n  \n  - Fix a traceback in `HsDevBackend.files_and_contents`; `None` is usually passed in as a default, not an empty dictionary.\n  \n  - Revert some `sublime_plugin.ViewEventListener` refactoring, since the API was only recently \"enhanced\" (Build 3155 -- most users are on Build 3146.)\n  \n  **Fly mode**: Checking or linting after a pause in typing, aka \"fly mode\", now works reliably again. To enable, add the following to your user settings:\n  \n      \"lint_check_fly\": true\n  \n  You can control the idle time that _SublimeHaskell_ waits before initiating checking or linting via the `lint_check_fly_idle ` setting. The default is 5 seconds. You should not set this to a value lower than 3 seconds or checks/lints can occur faster than you can type (although there is nothing to stop you from doing so in the code. Yet.)\n  \n  **Issue 374 (enhancement)**: Limiting the error, warning and hints displayed in the _Sublime Haskell Output Window_ after a check, lint or build is now supported via the `show_only` setting:\n  \n      \"show_only\": {\n          \"errors\": true,\n          \"warnings\": true,\n          \"hints\": true\n      },\n  \n  The `show_only` setting can be customized as _SublimeHaskell_ project setting, i.e., from within a `.sublime-project` file:\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\":\n          {\n            \"show_only\": {\n                \"errors\": true,\n                \"warnings\": true,\n                \"hints\": true\n            },\n          }\n      }\n  \n  **Issue 365**: Rethink how plugin preferences are stored in the `SettingsContainer` object; use Python properties instead of being clever with instance attributes. Property setters allow validity testing when new preference values are read.\n  \n  **Issue 377 (possible 373, 359)**: @coodoo noticed a `UnicodeDecodeError` traceback after saves, which turns out to be a short read from the backend's socket -- more data is available, which SublimeHaskell should continue to read in order to ensure that decode('utf-8') succeeds. The fix here is to continue reading from the socket if decode('utf-8') raises the UnicodeDecodeError exception.  If no exception is raised, then split and process what looks like a complete request.\n  \n  This probably also fixes issues 373 and 359, which manifested similar behavior, but without the traceback.\n  \n  **Issues 375, 376 (duplicate)**: Make the \"local\", \"exec-with\" and \"install-dir\" `hsdev` backend options work together properly. If, for some reason, a backend has \"local\" set but either \"exec-with\" or \"install-dir\" isn't set, SublimeHaskell should not generate a backtrace. It should just mark the particular backend as unusable and continue onward.\n  \n  **Fix REPL support**: REPL support was supported solely via `cabal repl` and the code supporting Haskell REPLs itself needed re-evaluation. All execution wrappers are now supported: `cabal repl`, `cabal new-repl` and `stack repl`.\n  \n  *NOTE: The `haskell_build_tool` setting determines which execution wrapper is used. `haskell_build_tool` can be a project-specific setting, not just a default or user preference. See below in Release 2.1.3.*\n  \n  **Fix status line issues**: There was a long standing bug with SublimeHaskell's use and manipulation of the status line. The main manifestation was a thread that repeatedly updated the status line every 0.2 seconds -- it wasn't always perceivable because there wasn't any noticeable flicker. This fix should cut down in CPU and thread usage that this issue may have caused.\n  \n  **'SublimeHaskell: Reinspect All' now asynchronous**: This command now does its work asynchronously. Previously, it did its work in the SublimeText UI thread, leading to perceived hangs.\n  \n  **Issue 371**: Revert a spurious change to a `hsdev` backend method (that was supposed to be reverted.)\n  \n  **SublimeHaskell: Run**: Make running project executables play nicely with execution wrappers (e.g., `cabal run`, `stack exec`, `cabal new-run`). Eliminated the 'SublimeHaskell: Stack Exec' item because all of the functionality is included in 'SublimeHaskell: Run'. This change eliminates all of the previous gymnastics required to locate the executable in the first place.\n  \n  `SublimeHaskell: Run` will also prompt for command line arguments, which are parsed into a Python list by the `shlex` package. Arguments will persist across command invocations and Sublime Text sessions.\n  \n  **Issue 365**: More linting on the `prettify_exectable` setting. Someday, we'll know where the \"{0}\" comes from.\n  \n  **Issue 361**: Add `cabal new-test` support in the `SublimeHaskell: Test` command. Restored automatic testing after a successful build; automatic benchmarking is also possible after a successful build. See **auto_build_mode** note below.\n  \n  **Issue 344**: Most, if not all, 'cabal new-*' commands should be available, including `new-freeze` and `new-bench`. Corresponding commands for regular `cabal` and `stack` (as applicable) implemented. The major hack is that `cabal-new-build` does not have a clean command, so this is implemented as a function inside the SublimeHaskell builder.\n  \n  **auto_build_mode change**: The `auto_run_tests` setting is now deprecated. Its functionality is now replaced by two new build modes: *normal-then-test* (run tests after a successful build) and *normal-then-bench* (run benchmarks after a successful build.) SublimeHaskell will pop up an information dialog if `auto_run_tests` is in your preferences.\n  \n  **Project Settings**: All SublimeHaskell-related project settings are now contained within the `SublimeHaskell` dictionary. This allows you to encapsulate certain settings, like `haskell_build_tool`, on a per-project basis instead of via user preferences. There is more information at the bottom of the `SublimeHaskell.sublime-settings` (default plugin settings) file.\n  \n      {\n        \"folders\":\n        [\n          {\n            \"path\": \".\"\n          }\n        ],\n        \"SublimeHaskell\": {\n          \"haskell_build_tool\": \"cabal-new-build\"\n        }\n      }\n  \n  **build.py**: Code cleanups related to building Haskell applications, mostly related to better class structure, fewer global variables. (Related to issues 361 and 344.)\n  \n  **`pylint` cleanups**: `pylint` has updated, lots of new warnings. Fix code to bring them down to a dull roar.\n  \n  **Issue 366**: Word and default completions did not produce results, which became apparent while using the \"none\" backend. Removed the `inhibit_completions` setting because its purpose was confusing. Added two new settings, `add_word_completions` and `add_default_completions`. `add_word_completions` adds words in the source file that are more than three characters; this is a SublimeText feature that SublimeHaskell normally inhibits. `add_default_completions` adds the contents of the `Haskell.sublime-completions` file, which SublimeHaskell normally inhibits as well. Both settings default to `false`. (H/T to @Pastafarianist.)\n  \n  **ghc-mod**: Completions now work again, modeled off the `ghc-mod/elisp/ghc-comp.el` code. It's not perfect, but it suffices to improve developer productivity.\n  \n  **Issue 365 (partial)**: Fix dignostic message when SublimeHaskell doesn't accept the `prettify_executable` setting's value.\n  \n  **Issue 364**: `SublimeHaskell: Test` actually invoked the `install` task, not the `test` task. Also added `SublimeHaskell - Test` to the \"Build With...\" menu. Issue fixed.\n  \n  **Issue 352**: Add command line options for `stylish-haskell` and `hindent`. NOTE: These are lists, not strings.\n  \n  ## Upcoming Development Milestones\n  \n  Upcoming development milestones, listed in order of priority:\n  \n  ### The SublimeHaskell Editing Guide (Ongoing)\n  \n  Documentation is always a good thing. The guide is a work-in-progress.\n",
			"settings":
			{
				"buffer_size": 79562,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "Packages/User/Mytest.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/User/Mytest.sublime-build",
					""
				],
				[
					"Packages/User/Mytest.sublime-build",
					"exec"
				]
			],
			[
				"Packages/User/Mytest.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 372.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: perl",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"hsd",
				"Preferences: SublimeHaskell Settings – Default"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 342.0,
		"history":
		[
			"stack build;",
			"stack build",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/root/wigner-ville-accelerate/src",
		"/root/wigner-ville-accelerate/src/Data",
		"/root/wigner-ville-accelerate/src/Data/Array",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math"
	],
	"file_history":
	[
		"/media/root/2625-D0D3/FWRules_1sec.txt",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math/ChoiWilliams.hs",
		"/root/gladeExample/app/Main.hs",
		"/root/yesod/myFirst/templates/default-layout.lucius",
		"/root/gladeExample/stack.yaml",
		"/root/gladeExample/gladeExample.cabal",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math/BornJordan.hs",
		"/root/WVille/app/Main.hs",
		"/root/hperf/src/Parse_results.hs",
		"/root/hperf/src/Parse_args.hs",
		"/root/WVille/src/ParseFile.hs",
		"/root/hperf/app/Main.hs",
		"/root/WVille/stack-8.2.yaml",
		"/root/WVille/src/ParseArgs.hs",
		"/root/WVille/stack-8.0.yaml",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math/Qtfd.hs",
		"/root/yesod/myFirst/templates/default-layout-wrapper.hamlet",
		"/root/yesod/myFirst/templates/homepage.hamlet",
		"/root/haskell-projects/ForUdgin/src/ProcessSeries.hs",
		"/root/haskell-projects/ForUdgin/app/Main.hs",
		"/root/wigner-ville-accelerate/wigner-ville-accelerate.cabal",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math/Wigner'.hs",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math/PseudoWigner.hs",
		"/root/hperf/src/Iperf_exec.hs",
		"/root/wigner-ville-accelerate/Shelly.hs/src/Shelly.hs",
		"/root/hperf/stack.yaml",
		"/root/hperf/src/HperfDataTypes.hs",
		"/root/wigner-ville-accelerate/stack.yaml",
		"/root/WVille/WVille.cabal",
		"/root/hperf/src/WebSettings.hs",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math/WindowFunc.hs",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math/Hilbert.hs",
		"/root/wigner-ville-accelerate/src/Data/Array/Accelerate/Math/Wigner.hs",
		"/root/wigner-ville-accelerate/LICENSE",
		"/root/wigner-ville-accelerate/README.md",
		"/root/accelerate-fft/Data/Array/Accelerate/Math/FFT.hs",
		"/root/accelerate-fft/accelerate-fft.cabal",
		"/root/accelerate-fft/stack-8.0.yaml",
		"/root/accelerate-fft/stack.yaml",
		"/root/WVille/README.md",
		"/root/WVille/LICENSE",
		"/root/wigner-ville-accelerate/stack-8.2.yaml",
		"/root/WVille/stack.yaml",
		"/root/wigner-ville-accelerate/stack-8.0.yaml",
		"/root/wigner-ville-accelerate/src/Wigner.hs",
		"/root/wigner-ville-accelerate/src/Wigner'.hs",
		"/root/accelerate-fft/README.md",
		"/root/wigner-ville-accelerate/src/WindowFunc.hs",
		"/root/wigner-ville-accelerate/src/Hilbert.hs",
		"/root/wigner-ville-accelerate/src/PseudoWigner.hs",
		"/root/wigner-ville-accelerate/src/Smoothed.hs",
		"/root/wigner-ville-accelerate/src/ParseArgs.hs",
		"/root/accelerate-fft/stack-7.10.yaml",
		"/root/acc2/accelerate-fft/Data/Array/Accelerate/Math/FFT/Mode.hs",
		"/root/acc2/accelerate-fft/Data/Array/Accelerate/Math/FFT.hs",
		"/root/accelerate-fft/Data/Array/Accelerate/Math/FFT/Mode.hs",
		"/root/accelerate-fft/Data/Array/Accelerate/Math/FFT/LLVM/PTX.hs",
		"/root/acc2/accelerate-fft/Data/Array/Accelerate/Math/FFT/LLVM/PTX.hs",
		"/root/acc2/accelerate-fft/Data/Array/Accelerate/Math/FFT/LLVM/Native.hs",
		"/root/accelerate-fft/Data/Array/Accelerate/Math/FFT/LLVM/Native.hs",
		"/root/wigner-ville-accelerate/app/Main.hs",
		"/root/haskell-projects/wigner/wigner.cabal",
		"/root/haskell-projects/wigner/stack.yaml",
		"/root/haskell-projects/wigner/src/Wigner.hs",
		"/root/haskell-projects/wigner/accelerate-fft/Data/Array/Accelerate/Math/FFT/Mode.hs",
		"/root/haskell-projects/wigner/accelerate-fft/Data/Array/Accelerate/Math/FFT/LLVM/Native.hs",
		"/root/haskell-projects/wigner/accelerate-fft/Data/Array/Accelerate/Math/FFT/LLVM/PTX.hs",
		"/root/haskell-projects/wigner/accelerate-fft/Data/Array/Accelerate/Math/FFT.hs",
		"/root/haskell-projects/wigner/src/RwData.hs",
		"/root/haskell-projects/wigner/src/PseudoWigner.hs",
		"/root/haskell-projects/wigner/app/Main.hs",
		"/root/haskell-projects/wigner/src/Hilbert.hs",
		"/root/haskell-projects/wigner/src/wigner2.hs",
		"/root/haskell-projects/wigner/wigner.sublime-project",
		"/root/haskell-projects/wigner/.stack-work/logs/accelerate-fft-1.0.0.0.log",
		"/root/haskell-projects/wigner/wigner2.hs",
		"/C/1/tfrpwv.m",
		"/C/1/tfrspwv.m",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/app/Main.hs",
		"/C/Users/lazyb/Downloads/wigner_ville_spectrum_example.py",
		"/root/haskell-projects/wigner/src/rwdata.hs",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/stack.yaml",
		"/root/haskell-projects/wigner/src/wigner.hs",
		"/C/Users/lazyb/1.hs",
		"/C/Users/lazyb/Documents/haskell-projects/wigner/wigner/wigner2.hs",
		"/C/Users/lazyb/Documents/haskell-projects/wigner/wigner/wigner.cabal",
		"/C/Users/lazyb/Documents/haskell-projects/wigner/wigner/src/WW.txt",
		"/C/Users/lazyb/Documents/haskell-projects/wigner/wigner/app/Main.hs",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/ProcessVideoSeries.cabal",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/.stack-work/install/63bf7b30/doc/ProcessVideoSeries-0.1.0.0/ProcessSeries.html",
		"/C/Users/lazyb/Documents/haskell-projects/wigner/wigner/src/rwdata.hs",
		"/C/Users/lazyb/Documents/haskell-projects/wigner/wigner/stack.yaml",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/src/ProcessSeries.hs",
		"/C/Users/lazyb/Downloads/libffi-3.2.1/x86_64-w64-mingw32/include/Makefile",
		"/C/Users/lazyb/Downloads/libffi-3.2.1/Makefile",
		"/C/Users/lazyb/Downloads/libffi-3.2.1/x86_64-w64-mingw32/man/Makefile",
		"/C/Users/lazyb/Downloads/libffi-3.2.1/x86_64-w64-mingw32/testsuite/Makefile",
		"/C/Users/lazyb/Downloads/libffi-3.2.1/x86_64-w64-mingw32/Makefile",
		"/C/Users/lazyb/Desktop/practical_task.m",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/src/processSeries.hs",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/.stack-work/installed-cache.bin",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/MySecondfunc.hs",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/MythirdFunk.hs",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/Graham/Tictac.hs",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/myfirst.cabal",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/ForUdgin.cabal",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/Setup.hs",
		"/C/Users/lazyb/Downloads/ffmpeg-light-master/src/Codec/FFmpeg/Juicy.hs",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/stack.yaml",
		"/C/Users/lazyb/Downloads/ffmpeg-light-master (1).zip",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/project11.sublime-project",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/Myfirstfunc.hs",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/src/Lib.hs",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/libavcodec.pc",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/libavdevice.pc",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/libavformat.pc",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/libavutil.pc",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/libswscale.pc",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/Graham/Hello.hs",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/LICENSE",
		"/C/Users/lazyb/Documents/haskell-projects/ForUdgin/README.md",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/Graham/Exercises.hs",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/Graham/Exercises2.hs",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/Graham/games.hs",
		"/C/Users/lazyb/Documents/haskell-projects/myfirst/myfirst/src/Graham/tictac.hs",
		"/C/Users/lazyb/Documents/haskell-projects/newtest/Setup.hs",
		"/C/Users/lazyb/Documents/haskell-projects/newtest/src/Lib.hs",
		"/C/Users/lazyb/AppData/Roaming/Sublime Text 3/Packages/User/Mytest.sublime-build"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"loadYa",
			"getApplicationREPL",
			"port",
			" port",
			" \n",
			"true",
			"false",
			"true",
			"alpha",
			"sshPairsParar",
			"errTextCIO",
			"sshPairsP",
			"pure",
			"parse_res",
			"manager",
			" manager",
			"makereq",
			"writeString",
			"excep",
			"TLI.",
			"AI.",
			"compl",
			"hilber",
			"ADC",
			"sinc",
			"P.",
			"getiperfT",
			"fft1D_r",
			"type",
			"rank",
			"nameOf",
			"subAVG",
			"liftAtoC",
			"shapeToList ",
			"h",
			"generate",
			"ALI",
			"prsE",
			"hadd",
			"\"",
			"ceiling",
			"step",
			"ceiling",
			"step",
			"==",
			"scals !! 3",
			"scals !! 2",
			"scals !! 4",
			"scals !! 1",
			"undefined",
			"ivectors",
			"A.unit",
			"link",
			"ld.exe",
			"accLength",
			"Int",
			"read",
			"procee",
			"length",
			"para",
			"parall",
			"process ",
			" IO",
			"IO",
			"ШЩ",
			"createS",
			"S.singleton",
			"S.empty",
			"S.drop",
			"S.lookup 0",
			"S.Seq",
			"U.",
			"S.Seq",
			"processFrames",
			"U.",
			"pT",
			"U.",
			"C.",
			"V.",
			"Pixel8",
			"V.",
			"Double",
			"JuicyPixelFormat",
			"PixelRGBA8",
			"AVPixel",
			"Integer",
			"100",
			"move g",
			"chop",
			"diag2",
			"goto",
			"Tree",
			"isFull",
			"fold",
			"foldr",
			"show",
			"gameTr",
			"depth",
			"show",
			"let",
			"wins",
			"depth",
			"wins",
			"eratos",
			"erat",
			"eratos",
			"Num ",
			"Num",
			"!!",
			"deeps",
			"seq",
			"putboard",
			"putStr",
			"putstr",
			"map",
			"rmd",
			"isLo",
			"hdevtoo"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"false",
			"true",
			"false",
			"sshPairsPar",
			"writeData",
			"supAVG",
			"floor"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/root/wigner-ville-accelerate"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Data/Array/Accelerate/Math/ModifiedB.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4880,
						"regions":
						{
						},
						"selection":
						[
							[
								3518,
								3518
							]
						],
						"settings":
						{
							"subhask_project_dir": "/root/wigner-ville-accelerate",
							"subhask_project_name": "wigner-ville-accelerate",
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1296.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Data/Array/Accelerate/Math/Hilbert.hs",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 3467,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"subhask_project_dir": "/root/wigner-ville-accelerate",
							"subhask_project_name": "wigner-ville-accelerate",
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/root/yesod/myFirst/config/settings.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1556,
						"regions":
						{
						},
						"selection":
						[
							[
								353,
								353
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 79562,
						"regions":
						{
						},
						"selection":
						[
							[
								79562,
								79562
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 52.0
	},
	"input":
	{
		"height": 74.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 189.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sublime_haskell_output_panel":
	{
		"height": 127.0
	},
	"pinned_build_system": "Packages/User/haskell-stack.sublime-build",
	"project": "",
	"replace":
	{
		"height": 98.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
